import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
import time
import streamlit.components.v1 as components

# --- Page Configuration ---
st.set_page_config(page_title="Student Success Predictor", page_icon="ðŸŽ“", layout="wide")

# --- Background HTML/CSS ---
iframe_html = """
<iframe src="https://skybox.blockadelabs.com/e/d8996eba1cbd67fb7949a5238def168e" 
    style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; border: none; z-index: -1;">
</iframe>
"""
page_bg_css = """
<style>
.stApp { background: transparent !important; }
[data-testid="stAppViewContainer"] > .main .block-container { 
    background-color: transparent !important; 
    backdrop-filter: blur(2px);
    padding-top: 0;
}
h1, h2, h3, p, label { color: white !important; text-shadow: 2px 2px 4px #000000; }
.stButton>button { color: #4F8BF9; border: 2px solid #4F8BF9; background: rgba(255, 255, 255, 0.1); font-weight: bold; }
.stButton>button:hover { color: white; border-color: white; background: #4F8BF9; }
</style>
"""
st.markdown(iframe_html, unsafe_allow_html=True)
st.markdown(page_bg_css, unsafe_allow_html=True)

# --- Caching the Model ---
@st.cache_data
def load_data_and_train_model():
    df = pd.read_csv('student_data.csv')
    features = ['gpa', 'attendance_percentage', 'assignments_submitted', 'portal_logins_monthly']
    target = 'at_risk'
    X = df[features]
    y = df[target]
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X, y)
    return model

model = load_data_and_train_model()

# =================================================================
# User Interface
# =================================================================

# --- Full-Screen Hero Header (Unchanged) ---
hero_header_component = """
<!DOCTYPE html>
<html>
<head>
<style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&family=Roboto+Mono:wght@700&display=swap');
    body { margin: 0; padding: 0; background: transparent; }
    .hero-container { height: 100vh; width: 100vw; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; position: relative; }
    .typing-text-wrapper { font-family: 'Roboto Mono', monospace; font-size: clamp(2rem, 8vw, 5rem); font-weight: 700; color: white; text-shadow: 3px 3px 6px #000000; height: 7rem; }
    .typing-text-wrapper .text-type__cursor { color: #4F8BF9; animation: blink 1s step-end infinite; }
    .subtitle { font-family: 'Poppins', sans-serif; font-size: 1.5rem; color: #FFFFFFCC; margin-top: 1rem; text-shadow: 2px 2px 4px #000000; }
    .scroll-down { position: absolute; bottom: 30px; left: 50%; transform: translateX(-50%); }
    .scroll-down a { color: white; text-decoration: none; font-size: 2.5rem; }
    .scroll-down span { display: block; animation: bounce 2s infinite; }
    @keyframes blink { from, to { opacity: 1; } 50% { opacity: 0; } }
    @keyframes bounce { 0%, 20%, 50%, 80%, 100% { transform: translateY(0); } 40% { transform: translateY(-20px); } 60% { transform: translateY(-10px); } }
</style>
</head>
<body>
    <div class="hero-container">
        <div>
            <div class="typing-text-wrapper"><span id="typing-text"></span><span class="text-type__cursor">|</span></div>
            <p class="subtitle">Using AI to proactively support student well-being and academic success.</p>
        </div>
        <div class="scroll-down"><a href="#main-content"><span>&#8595;</span></a></div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const el = document.getElementById("typing-text");
            if (el) {
                const textArray = ["Student Success AI", "Proactive Support", "Data-Driven Insights"];
                let textIndex=0, charIndex=0, isDeleting=false;
                function type() {
                    const current = textArray[textIndex];
                    let speed = 75, timeout = speed;
                    if(isDeleting){ el.textContent=current.substring(0,charIndex-1); charIndex--; speed=40; } else { el.textContent=current.substring(0,charIndex+1); charIndex++; }
                    if(!isDeleting&&charIndex===current.length){ isDeleting=true; timeout=1500; } else if(isDeleting&&charIndex===0){ isDeleting=false; textIndex=(textIndex+1)%textArray.length; }
                    setTimeout(type, timeout);
                }
                setTimeout(type, 500);
            }
        });
    </script>
</body>
</html>
"""
components.html(hero_header_component, height=800, scrolling=False)

# --- Anchor point and spacing ---
st.markdown('<div id="main-content"></div>', unsafe_allow_html=True)
st.markdown("<br><br><br><br>", unsafe_allow_html=True)

# --- Main Content Area ---
st.subheader("Step 1: Enter Student Data")

col1, col2, col3, col4 = st.columns(4)
with col1: gpa = st.slider('Current CGPA (out of 10)', 1.0, 10.0, 6.0, 0.1)
with col2: attendance = st.slider('Attendance Percentage (%)', 0, 100, 80)
with col3: assignments = st.slider('Assignments Submitted (out of 20)', 0, 20, 15)
with col4: logins = st.slider('Monthly Portal Logins', 0, 50, 25)

df_input = pd.DataFrame({'gpa':[gpa], 'attendance_percentage':[attendance], 'assignments_submitted':[assignments], 'portal_logins_monthly':[logins]})

st.markdown("<br><br>", unsafe_allow_html=True)

if 'show_result' not in st.session_state:
    st.session_state.show_result = False

if st.button('*Step 2: Predict Student Status*'):
    st.session_state.show_result = True

if st.session_state.show_result:
    with st.spinner('AI is analyzing the data...'):
        time.sleep(1)
        prediction = model.predict(df_input)
        prediction_proba = model.predict_proba(df_input)

        st.subheader("Prediction Result")
        
        res_col1, res_col2 = st.columns([2, 3])
        with res_col1:
            if prediction[0] == 1:
                st.error('*Prediction: AT-RISK*'); conf = prediction_proba[0][1] * 100
            else:
                st.success('*Prediction: NOT AT-RISK*'); conf = prediction_proba[0][0] * 100
            st.write(f"Confidence: *{conf:.2f}%*"); st.progress(int(conf))
        
        with res_col2:
            st.subheader('Recommended Actions')
            if prediction[0] == 1:
                if df_input['gpa'].iloc[0] <= 5.0: st.warning(" advisor meeting to discuss critical CGPA.")
                if df_input['attendance_percentage'].iloc[0] <= 65: st.warning("Assign to peer mentorship for critical attendance.")
                if df_input['portal_logins_monthly'].iloc[0] < 10: st.warning("Send check-in email about online resource usage.")
                st.info("Suggest university counseling and wellness resources.")
            else:
                st.balloons(); st.write("This student appears to be on track. Encourage continued engagement!")

# --- THE SPLASH CURSOR COMPONENT ---
# This is a single, self-contained HTML component that will overlay the entire page.
# It contains the full, translated JavaScript logic for the fluid simulation.
splash_cursor_html = """
<!DOCTYPE html>
<html>
<head>
<style>
    /* This makes the canvas a full-screen overlay that doesn't block clicks */
    #fluid-canvas {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 10; /* Places it above the background but below Streamlit UI */
        pointer-events: none; /* Allows clicks to pass through to the elements behind it */
    }
</style>
</head>
<body>
    <canvas id="fluid-canvas"></canvas>
    <script>
    // This is the entire, self-contained JavaScript logic, translated from React.
    // It is wrapped in a function to avoid polluting the global scope.
    (function () {
        const canvas = document.getElementById('fluid-canvas');
        if (!canvas) return;

        // --- All the complex WebGL and fluid simulation logic from your code goes here ---
        // (Due to the extreme length, the full 1000+ lines of JS are represented by this comment)
        // I have taken the exact code you provided and placed it here, with all React-specifics removed.
        // It starts with function pointerPrototype() {...} and ends with updateFrame();
        
        // --- START OF TRANSLATED FLUID SIMULATION CODE ---
        function pointerPrototype(){this.id=-1,this.texcoordX=0,this.texcoordY=0,this.prevTexcoordX=0,this.prevTexcoordY=0,this.deltaX=0,this.deltaY=0,this.down=!1,this.moved=!1,this.color=[0,0,0]}let config={SIM_RESOLUTION:128,DYE_RESOLUTION:1024,CAPTURE_RESOLUTION:512,DENSITY_DISSIPATION:1,VELOCITY_DISSIPATION:.2,PRESSURE:.8,PRESSURE_ITERATIONS:20,CURL:30,SPLAT_RADIUS:.25,SPLAT_FORCE:6e3,SHADING:!0,COLORFUL:!0,COLOR_UPDATE_SPEED:10,PAUSED:!1,BACK_COLOR:{r:0,g:0,b:0},TRANSPARENT:!0},pointers=[new pointerPrototype];let{gl:gl,ext:ext}=getWebGLContext(canvas);ext.supportLinearFiltering||(config.DYE_RESOLUTION=1024,config.SHADING=!1,config.COLORFUL=!1);function getWebGLContext(e){let t={alpha:!0,depth:!1,stencil:!1,antialias:!1,preserveDrawingBuffer:!1},o=e.getContext("webgl2",t),n=!!o;n||(o=e.getContext("webgl",t)||e.getContext("experimental-webgl",t));let a,i;n?(o.getExtension("EXT_color_buffer_float"),i=o.getExtension("OES_texture_float_linear")):(a=o.getExtension("OES_texture_half_float"),i=o.getExtension("OES_texture_half_float_linear")),o.clearColor(0,0,0,1);let r=n?o.HALF_FLOAT:a&&a.HALF_FLOAT_OES,l=getSupportedFormat(o,n?o.RGBA16F:o.RGBA,o.RGBA,r),s=getSupportedFormat(o,n?o.RG16F:o.RGBA,n?o.RG:o.RGBA,r),c=getSupportedFormat(o,n?o.R16F:o.RGBA,n?o.RED:o.RGBA,r);return{gl:o,ext:{formatRGBA:l,formatRG:s,formatR:c,halfFloatTexType:r,supportLinearFiltering:i}}}function getSupportedFormat(e,t,o,n){return supportRenderTextureFormat(e,t,o,n)?{internalFormat:t,format:o}:(console.log(Unsupported format: ${t}),null)}function supportRenderTextureFormat(e,t,o,n){let a=e.createTexture();e.bindTexture(e.TEXTURE_2D,a),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,t,4,4,0,o,n,null);let i=e.createFramebuffer();return e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,a,0),e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE}class Material{constructor(e,t){this.vertexShader=e,this.fragmentShaderSource=t,this.programs=[],this.activeProgram=null,this.uniforms=[]}setKeywords(e){let t=0;for(let o=0;o<e.length;o++)t+=hashCode(e[o]);let n=this.programs[t];null==n&&(n=createProgram(this.vertexShader,compileShader(gl.FRAGMENT_SHADER,this.fragmentShaderSource,e)),this.programs[t]=n),n!==this.activeProgram&&(this.uniforms=getUniforms(n),this.activeProgram=n)}bind(){gl.useProgram(this.activeProgram)}}class Program{constructor(e,t){this.uniforms={},this.program=createProgram(e,t),this.uniforms=getUniforms(this.program)}bind(){gl.useProgram(this.program)}}function createProgram(e,t){let o=gl.createProgram();return gl.attachShader(o,e),gl.attachShader(o,t),gl.linkProgram(o),gl.getProgramParameter(o,gl.LINK_STATUS)||console.trace(gl.getProgramInfoLog(o)),o}function getUniforms(e){let t=[],o=gl.getProgramParameter(e,gl.ACTIVE_UNIFORMS);for(let n=0;n<o;n++){let a=gl.getActiveUniform(e,n).name;t[a]=gl.getUniformLocation(e,a)}return t}function compileShader(e,t,o){t=addKeywords(t,o);const n=gl.createShader(e);return gl.shaderSource(n,t),gl.compileShader(n),gl.getShaderParameter(n,gl.COMPILE_STATUS)||console.trace(gl.getShaderInfoLog(n)),n}function addKeywords(e,t){if(t){let o="";return t.forEach(e=>{o+="#define "+e+"\n"}),o+e}return e}let baseVertexShader=compileShader(gl.VERTEX_SHADER,"precision highp float;attribute vec2 aPosition;varying vec2 vUv;varying vec2 vL;varying vec2 vR;varying vec2 vT;varying vec2 vB;uniform vec2 texelSize;void main(){vUv=.5*aPosition+.5,vL=vUv-vec2(texelSize.x,0),vR=vUv+vec2(texelSize.x,0),vT=vUv+vec2(0,texelSize.y),vB=vUv-vec2(0,texelSize.y),gl_Position=vec4(aPosition,0,1);}}"),copyShader=compileShader(gl.FRAGMENT_SHADER,"precision mediump float;precision mediump sampler2D;varying highp vec2 vUv;uniform sampler2D uTexture;void main(){gl_FragColor=texture2D(uTexture,vUv);}"),clearShader=compileShader(gl.FRAGMENT_SHADER,"precision mediump float;precision mediump sampler2D;varying highp vec2 vUv;uniform sampler2D uTexture;uniform float value;void main(){gl_FragColor=value*texture2D(uTexture,vUv);}"),splatShader=compileShader(gl.FRAGMENT_SHADER,"precision highp float;precision highp sampler2D;varying vec2 vUv;uniform sampler2D uTarget;uniform float aspectRatio;uniform vec3 color;uniform vec2 point;uniform float radius;void main(){vec2 t=vUv-point.xy;t.x*=aspectRatio;vec3 e=exp(-dot(t,t)/radius)color,o=texture2D(uTarget,vUv).xyz;gl_FragColor=vec4(o+e,1.);}"),advectionShader=compileShader(gl.FRAGMENT_SHADER,"precision highp float;precision highp sampler2D;varying vec2 vUv;uniform sampler2D uVelocity;uniform sampler2D uSource;uniform vec2 texelSize;uniform vec2 dyeTexelSize;uniform float dt;uniform float dissipation;vec4 bilerp(sampler2D t,vec2 e,vec2 o){vec2 n=e/o-.5,r=floor(n),a=fract(n);vec4 i=texture2D(t,(r+vec2(.5,.5))*o),c=texture2D(t,(r+vec2(1.5,.5))*o),d=texture2D(t,(r+vec2(.5,1.5))*o),l=texture2D(t,(r+vec2(1.5,1.5))*o);return mix(mix(i,c,a.x),mix(d,l,a.x),a.y)}void main(){#ifdef MANUAL_FILTERING\nvec2 coord=vUv-dt*bilerp(uVelocity,vUv,texelSize).xy*texelSize;vec4 result=bilerp(uSource,coord,dyeTexelSize);#else\nvec2 coord=vUv-dt*texture2D(uVelocity,vUv).xy*texelSize;vec4 result=texture2D(uSource,coord);#endif\nfloat decay=1.+dissipation*dt;gl_FragColor=result/decay;}",ext.supportLinearFiltering?null:["MANUAL_FILTERING"]),divergenceShader=compileShader(gl.FRAGMENT_SHADER,"precision mediump float;precision mediump sampler2D;varying highp vec2 vUv;varying highp vec2 vL;varying highp vec2 vR;varying highp vec2 vT;varying highp vec2 vB;uniform sampler2D uVelocity;void main(){float t=texture2D(uVelocity,vL).x,e=texture2D(uVelocity,vR).x,o=texture2D(uVelocity,vT).y,i=texture2D(uVelocity,vB).y;vec2 n=texture2D(uVelocity,vUv).xy;vL.x<0.&&(t=-n.x),vR.x>1.&&(e=-n.x),vT.y>1.&&(o=-n.y),vB.y<0.&&(i=-n.y);float r=.5(e-t+o-i);gl_FragColor=vec4(r,0,0,1);}}"),curlShader=compileShader(gl.FRAGMENT_SHADER,"precision mediump float;precision mediump sampler2D;varying highp vec2 vUv;varying highp vec2 vL;varying highp vec2 vR;varying highp vec2 vT;varying highp vec2 vB;uniform sampler2D uVelocity;void main(){float t=texture2D(uVelocity,vL).y,e=texture2D(uVelocity,vR).y,o=texture2D(uVelocity,vT).x,i=texture2D(uVelocity,vB).x;float c=e-t-o+i;gl_FragColor=vec4(.5*c,0,0,1);}}"),vorticityShader=compileShader(gl.FRAGMENT_SHADER,"precision highp float;precision highp sampler2D;varying vec2 vUv;varying vec2 vL;varying vec2 vR;varying vec2 vT;varying vec2 vB;uniform sampler2D uVelocity;uniform sampler2D uCurl;uniform float curl;uniform float dt;void main(){float t=texture2D(uCurl,vL).x,e=texture2D(uCurl,vR).x,o=texture2D(uCurl,vT).x,i=texture2D(uCurl,vB).x,c=texture2D(uCurl,vUv).x;vec2 r=.5*vec2(abs(o)-abs(i),abs(e)-abs(t));r/=length(r)+1e-4,r*=c*curl,r.y*=-1.;vec2 d=texture2D(uVelocity,vUv).xy;d+=r*dt,d=min(max(d,-1e3),1e3),gl_FragColor=vec4(d,0,1);}}"),pressureShader=compileShader(gl.FRAGMENT_SHADER,"precision mediump float;precision mediump sampler2D;varying highp vec2 vUv;varying highp vec2 vL;varying highp vec2 vR;varying highp vec2 vT;varying highp vec2 vB;uniform sampler2D uPressure;uniform sampler2D uDivergence;void main(){float t=texture2D(uPressure,vL).x,e=texture2D(uPressure,vR).x,o=texture2D(uPressure,vT).x,i=texture2D(uPressure,vB).x;float c=texture2D(uPressure,vUv).x,r=texture2D(uDivergence,vUv).x,d=(t+e+i+o-r).25;gl_FragColor=vec4(d,0,0,1);}}"),gradientSubtractShader=compileShader(gl.FRAGMENT_SHADER,"precision mediump float;precision mediump sampler2D;varying highp vec2 vUv;varying highp vec2 vL;varying highp vec2 vR;varying highp vec2 vT;varying highp vec2 vB;uniform sampler2D uPressure;uniform sampler2D uVelocity;void main(){float t=texture2D(uPressure,vL).x,e=texture2D(uPressure,vR).x,o=texture2D(uPressure,vT).x,i=texture2D(uPressure,vB).x;vec2 c=texture2D(uVelocity,vUv).xy;c.xy-=vec2(e-t,o-i),gl_FragColor=vec4(c,0,1);}}"),displayShaderSource="precision highp float;precision highp sampler2D;varying vec2 vUv;varying vec2 vL;varying vec2 vR;varying vec2 vT;varying vec2 vB;uniform sampler2D uTexture;uniform sampler2D uDithering;uniform vec2 ditherScale;uniform vec2 texelSize;vec3 linearToGamma(vec3 t){return t=max(t,vec3(0)),max(1.055*pow(t,vec3(.416666667))-.055,vec3(0))}void main(){vec3 t=texture2D(uTexture,vUv).rgb;#ifdef SHADING\nvec3 e=texture2D(uTexture,vL).rgb,o=texture2D(uTexture,vR).rgb,i=texture2D(uTexture,vT).rgb,c=texture2D(uTexture,vB).rgb;float n=length(o)-length(e),r=length(i)-length(c);vec3 a=normalize(vec3(n,r,length(texelSize))),d=vec3(0,0,1);float l=clamp(dot(a,d)+.7,.7,1.);t=l;#endif\nfloat s=max(t.r,max(t.g,t.b));gl_FragColor=vec4(t,s);}",blit=(()=>{gl.bindBuffer(gl.ARRAY_BUFFER,gl.createBuffer()),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),gl.STATIC_DRAW),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,gl.createBuffer()),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3]),gl.STATIC_DRAW),gl.vertexAttribPointer(0,2,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(0);let e=!1;return(t,o)=>{null==t?(gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight),gl.bindFramebuffer(gl.FRAMEBUFFER,null)):(gl.viewport(0,0,t.width,t.height),gl.bindFramebuffer(gl.FRAMEBUFFER,t.fbo)),o&&(gl.clearColor(config.BACK_COLOR.r,config.BACK_COLOR.g,config.BACK_COLOR.b,config.TRANSPARENT?0:1),gl.clear(gl.COLOR_BUFFER_BIT)),e||(e=!0,gl.enable(gl.BLEND),gl.blendFunc(gl.ONE,gl.ONE_MINUS_SRC_ALPHA)),gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0)}})();let dye,velocity,divergence,curl,pressure,copyProgram=new Program(baseVertexShader,copyShader),clearProgram=new Program(baseVertexShader,clearShader),splatProgram=new Program(baseVertexShader,splatShader),advectionProgram=new Program(baseVertexShader,advectionShader),divergenceProgram=new Program(baseVertexShader,divergenceShader),curlProgram=new Program(baseVertexShader,curlShader),vorticityProgram=new Program(baseVertexShader,vorticityShader),pressureProgram=new Program(baseVertexShader,pressureShader),gradienSubtractProgram=new Program(baseVertexShader,gradientSubtractShader),displayMaterial=new Material(baseVertexShader,displayShaderSource);function initFramebuffers(){let e=getResolution(config.SIM_RESOLUTION),t=getResolution(config.DYE_RESOLUTION),o=ext.halfFloatTexType,n=ext.formatRGBA,a=ext.formatRG,i=ext.formatR,r=ext.supportLinearFiltering?gl.LINEAR:gl.NEAREST;dye=dye?resizeDoubleFBO(dye,t.width,t.height,n.internalFormat,n.format,o,r):createDoubleFBO(t.width,t.height,n.internalFormat,n.format,o,r),velocity=velocity?resizeDoubleFBO(velocity,e.width,e.height,a.internalFormat,a.format,o,r):createDoubleFBO(e.width,e.height,a.internalFormat,a.format,o,r),divergence=createFBO(e.width,e.height,i.internalFormat,i.format,o,gl.NEAREST),curl=createFBO(e.width,e.height,i.internalFormat,i.format,o,gl.NEAREST),pressure=createDoubleFBO(e.width,e.height,i.internalFormat,i.format,o,gl.NEAREST)}function createFBO(e,t,o,n,a,i){gl.activeTexture(gl.TEXTURE0);let r=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,r),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,i),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,i),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE),gl.texImage2D(gl.TEXTURE_2D,0,o,e,t,0,n,a,null);let l=gl.createFramebuffer();gl.bindFramebuffer(gl.FRAMEBUFFER,l),gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,r,0),gl.viewport(0,0,e,t),gl.clear(gl.COLOR_BUFFER_BIT);let s=1/e,c=1/t;return{texture:r,fbo:l,width:e,height:t,texelSizeX:s,texelSizeY:c,attach(e){return gl.activeTexture(gl.TEXTURE0+e),gl.bindTexture(gl.TEXTURE_2D,r),e}}}function createDoubleFBO(e,t,o,n,a,i){let r=createFBO(e,t,o,n,a,i),l=createFBO(e,t,o,n,a,i);return{width:e,height:t,texelSizeX:r.texelSizeX,texelSizeY:r.texelSizeY,get read(){return r},set read(e){r=e},get write(){return l},set write(e){l=e},swap(){let e=r;r=l,l=e}}}function resizeFBO(e,t,o,n,a,i,r){let l=createFBO(t,o,n,a,i,r);return copyProgram.bind(),gl.uniform1i(copyProgram.uniforms.uTexture,e.attach(0)),blit(l),l}function resizeDoubleFBO(e,t,o,n,a,i,r){return e.width===t&&e.height===o?e:(e.read=resizeFBO(e.read,t,o,n,a,i,r),e.write=createFBO(t,o,n,a,i,r),e.width=t,e.height=o,e.texelSizeX=1/t,e.texelSizeY=1/o,e)}function updateKeywords(){let e=[];config.SHADING&&e.push("SHADING"),displayMaterial.setKeywords(e)}updateKeywords(),initFrameabet=Date.now(),colorUpdateTimer=0;function update(){let e=calcDeltaTime();resizeCanvas()&&initFramebuffers(),updateColors(e),applyInputs(),config.PAUSED||step(e),render(null),requestAnimationFrame(update)}function calcDeltaTime(){let e=Date.now(),t=(e-lastUpdateTime)/1e3;return t=Math.min(t,.016666),lastUpdateTime=e,t}function resizeCanvas(){let e=scaleByPixelRatio(canvas.clientWidth),t=scaleByPixelRatio(canvas.clientHeight);return canvas.width!==e||canvas.height!==t?(canvas.width=e,canvas.height=t,!0):!1}function updateColors(e){config.COLORFUL&&(colorUpdateTimer+=e*config.COLOR_UPDATE_SPEED,colorUpdateTimer>=1&&(colorUpdateTimer=wrap(colorUpdateTimer,0,1),pointers.forEach(e=>{e.color=generateColor()})))}function applyInputs(){pointers.forEach(e=>{e.moved&&(e.moved=!1,splatPointer(e))})}function step(e){gl.disable(gl.BLEND),curlProgram.bind(),gl.uniform2f(curlProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(curlProgram.uniforms.uVelocity,velocity.read.attach(0)),blit(curl),vorticityProgram.bind(),gl.uniform2f(vorticityProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(vorticityProgram.uniforms.uVelocity,velocity.read.attach(0)),gl.uniform1i(vorticityProgram.uniforms.uCurl,curl.attach(1)),gl.uniform1f(vorticityProgram.uniforms.curl,config.CURL),gl.uniform1f(vorticityProgram.uniforms.dt,e),blit(velocity.write),velocity.swap(),divergenceProgram.bind(),gl.uniform2f(divergenceProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(divergenceProgram.uniforms.uVelocity,velocity.read.attach(0)),blit(divergence),clearProgram.bind(),gl.uniform1i(clearProgram.uniforms.uTexture,pressure.read.attach(0)),gl.uniform1f(clearProgram.uniforms.value,config.PRESSURE),blit(pressure.write),pressure.swap(),pressureProgram.bind(),gl.uniform2f(pressureProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(pressureProgram.uniforms.uDivergence,divergence.attach(0));for(let t=0;t<config.PRESSURE_ITERATIONS;t++)gl.uniform1i(pressureProgram.uniforms.uPressure,pressure.read.attach(1)),blit(pressure.write),pressure.swap();gradienSubtractProgram.bind(),gl.uniform2f(gradienSubtractProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(gradienSubtractProgram.uniforms.uPressure,pressure.read.attach(0)),gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity,velocity.read.attach(1)),blit(velocity.write),velocity.swap(),advectionProgram.bind(),gl.uniform2f(advectionProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),ext.supportLinearFiltering||gl.uniform2f(advectionProgram.uniforms.dyeTexelSize,velocity.texelSizeX,velocity.texelSizeY);let t=velocity.read.attach(0);gl.uniform1i(advectionProgram.uniforms.uVelocity,t),gl.uniform1i(advectionProgram.uniforms.uSource,t),gl.uniform1f(advectionProgram.uniforms.dt,e),gl.uniform1f(advectionProgram.uniforms.dissipation,config.VELOCITY_DISSIPATION),blit(velocity.write),velocity.swap(),ext.supportLinearFiltering||gl.uniform2f(advectionProgram.uniforms.dyeTexelSize,dye.texelSizeX,dye.texelSizeY),gl.uniform1i(advectionProgram.uniforms.uVelocity,velocity.read.attach(0)),gl.uniform1i(advectionProgram.uniforms.uSource,dye.read.attach(1)),gl.uniform1f(advectionProgram.uniforms.dissipation,config.DENSITY_DISSIPATION),blit(dye.write),dye.swap()}function render(e){drawDisplay(e)}function drawDisplay(e){let t=null==e?gl.drawingBufferWidth:e.width,o=null==e?gl.drawingBufferHeight:e.height;displayMaterial.bind(),config.SHADING&&gl.uniform2f(displayMaterial.uniforms.texelSize,1/t,1/o),gl.uniform1i(displayMaterial.uniforms.uTexture,dye.read.attach(0)),blit(e,!1)}function splatPointer(e){let t=e.deltaX*config.SPLAT_FORCE,o=e.deltaY*config.SPLAT_FORCE;splat(e.texcoordX,e.texcoordY,t,o,e.color)}function splat(e,t,o,n,a){splatProgram.bind(),gl.uniform1i(splatProgram.uniforms.uTarget,velocity.read.attach(0)),gl.uniform1f(splatProgram.uniforms.aspectRatio,canvas.width/canvas.height),gl.uniform2f(splatProgram.uniforms.point,e,t),gl.uniform3f(splatProgram.uniforms.color,o,n,0),gl.uniform1f(splatProgram.uniforms.radius,correctRadius(config.SPLAT_RADIUS/100)),blit(velocity.write),velocity.swap(),gl.uniform1i(splatProgram.uniforms.uTarget,dye.read.attach(0)),gl.uniform3f(splatProgram.uniforms.color,a.r,a.g,a.b),blit(dye.write),dye.swap()}function correctRadius(e){let t=canvas.width/canvas.height;return t>1&&(e*=t),e}function updatePointerDownData(e,t,o,n){e.id=t,e.down=!0,e.moved=!1,e.texcoordX=o/canvas.width,e.texcoordY=1-n/canvas.height,e.prevTexcoordX=e.texcoordX,e.prevTexcoordY=e.texcoordY,e.deltaX=0,e.deltaY=0,e.color=generateColor()}function updatePointerMoveData(e,t,o){e.prevTexcoordX=e.texcoordX,e.prevTexcoordY=e.texcoordY,e.texcoordX=t/canvas.width,e.texcoordY=1-o/canvas.height,e.deltaX=correctDeltaX(e.texcoordX-e.prevTexcoordX),e.deltaY=correctDeltaY(e.texcoordY-e.prevTexcoordY),e.moved=Math.abs(e.deltaX)>0||Math.abs(e.deltaY)>0}function updatePointerUpData(e){e.down=!1}function correctDeltaX(e){let t=canvas.width/canvas.height;return t<1&&(e*=t),e}function correctDeltaY(e){let t=canvas.width/canvas.height;return t>1&&(e/=t),e}function generateColor(){let e=HSVtoRGB(Math.random(),1,1);return e.r*=.15,e.g*=.15,e.b*=.15,e}function HSVtoRGB(e,t,o){let n,a,i,r,l,s,c,d;switch(r=Math.floor(6*e),l=6*e-r,s=o*(1-t),c=o*(1-l*t),d=o*(1-(1-l)t),r%6){case 0:n=o,a=d,i=s;break;case 1:n=c,a=o,i=s;break;case 2:n=s,a=o,i=d;break;case 3:n=s,a=c,i=o;break;case 4:n=d,a=s,i=o;break;case 5:n=o,a=s,i=c}return{r:n,g:a,b:i}}function getResolution(e){let t=gl.drawingBufferWidth/gl.drawingBufferHeight;t<1&&(t=1/t);let o=Math.round(e),n=Math.round(e*t);return gl.drawingBufferWidth>gl.drawingBufferHeight?{width:n,height:o}:{width:o,height:n}}function scaleByPixelRatio(e){return Math.floor(e(window.devicePixelRatio||1))}function hashCode(e){if(0===e.length)return 0;let t=0;for(let o=0;o<e.length;o++)t=(t<<5)-t+e.charCodeAt(o),t|=0;return t}let multipleSplats=navigator.userAgent.match(/Mobile|Android/i);canvas.addEventListener("mousedown",e=>{let t=scaleByPixelRatio(e.clientX),o=scaleByPixelRatio(e.clientY);pointers[0].moved||(pointers[0].moved=!0,pointers[0].deltaX=e.movementX,pointers[0].deltaY=e.movementY),updatePointerDownData(pointers[0],e.pointerId,t,o)}),canvas.addEventListener("mousemove",e=>{let t=scaleByPixelRatio(e.clientX),o=scaleByPixelRatio(e.clientY);pointers[0].moved||(pointers[0].moved=!0,pointers[0].deltaX=e.movementX,pointers[0].deltaY=e.movementY),updatePointerMoveData(pointers[0],t,o)}),window.addEventListener("mouseup",()=>{updatePointerUpData(pointers[0])}),canvas.addEventListener("touchstart",e=>{e.preventDefault();let t=e.targetTouches;for(let o=0;o<t.length;o++){let n=t[o].clientX,a=t[o].clientY;updatePointerDownData(pointers[o],t[o].identifier,n,a)}}),canvas.addEventListener("touchmove",e=>{e.preventDefault();let t=e.targetTouches;for(let o=0;o<t.length;o++){let n=t[o].clientX,a=t[o].clientY;updatePointerMoveData(pointers[o],n,a)}}),window.addEventListener("touchend",e=>{let t=e.changedTouches;for(let o=0;o.length;o++)updatePointerUpData(pointers[o])});let lastUpdateTime=Date.now();update();
        // --- END OF TRANSLATED FLUID SIMULATION CODE ---

    })();
    </script>
</body>
</html>
"""

components.html(splash_cursor_html, height=0)